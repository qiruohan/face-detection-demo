import{n as r,c as p,m as y,a as f,T as m,r as g,b as v}from"./faceApi-de678650.js";import{_ as k}from"./index-f2c62d86.js";import{o as w,c as M,b as a,t as l}from"./vendor-a240b8cd.js";function C(t){if(!t||!t.positions)return{pitch:0,yaw:0,roll:0};const e=t.getNose(),n=t.getLeftEye(),i=t.getRightEye();if(!e||!n||!i)return{pitch:0,yaw:0,roll:0};const o=h(n),s=h(i),c=Math.atan2(s.y-o.y,s.x-o.x),d=Math.atan2(e[3].y-o.y,e[3].x-o.x),u=Math.atan2(s.y-o.y,s.x-o.x);return{pitch:d*180/Math.PI,yaw:c*180/Math.PI,roll:u*180/Math.PI}}function h(t){const e=t.reduce((i,o)=>i+o.x,0)/t.length,n=t.reduce((i,o)=>i+o.y,0)/t.length;return{x:e,y:n}}const x={openMouth:"张张嘴",headleft:"向左转头",headRight:"向右转头",lookup:"向上抬头"},I={name:"Demo",components:{},data(){return{tip:"",actionIndex:0,actionCode:["openMouth","headleft","headRight","lookup"],loading:!1,constraints:{video:{width:{min:220,ideal:220,max:220},height:{min:220,ideal:220,max:220}},audio:!1},finish:!1,checkInterval:null}},computed:{actionTotal(){return this.actionCode.length},actionTitle(){return x[this.actionCode[this.actionIndex]]}},async mounted(){try{await this.loadModels()}catch(t){console.error("模型加载失败:",t),this.detectionStatus="模型加载失败，请检查网络连接"}try{await this.setupCamera()}catch(t){console.log(t)}try{await this.startDetection()}catch(t){console.log(t)}},beforeUnmount(){this.stopLivenessCheck()},methods:{stopLivenessCheck(){this.checkInterval&&(clearInterval(this.checkInterval),this.checkInterval=null)},isMouthOpen(t){if(!t||t.length<8)return!1;const e=t[2],n=t[6];return Math.abs(e.y-n.y)>10},checkAction(t,e){const{pitch:n,yaw:i}=e;switch(t){case"headleft":return i<=-3;case"headright":return i>=3;case"lookup":return n<=45;case"lookdown":return n>=12;default:return!1}},async loadModels(){const t="/models";await r.tinyFaceDetector.loadFromUri(t),await r.faceLandmark68Net.loadFromUri(t),await r.faceRecognitionNet.loadFromUri(t),console.log("Models loaded successfully!")},async setupCamera(){const t=document.getElementById("face-live-detection-video");t.style.transform="scaleX(-1)";const e=await navigator.mediaDevices.getUserMedia(this.constraints);t.srcObject=e,console.log("Camera setup successfully!",e)},actionFinish(){console.log("动作检测完成"),this.finish=!0,this.stopLivenessCheck()},async actionCheck(t,e){const n=this.actionCode[this.actionIndex];let i=!1;switch(n){case"openMouth":this.tip="请张嘴";const o=this.isMouthOpen(e.getMouth());console.log(o,"isMouth"),i=o;break;case"headleft":this.tip="请向左转头",i=this.checkAction("headleft",t);break;case"headRight":this.tip="请向右转头",i=this.checkAction("headright",t);break;case"lookup":this.tip="请抬头",i=this.checkAction("lookup",t);break}i&&this.actionIndex++},async startDetection(){const t=document.getElementById("face-live-detection-video");t.addEventListener("play",()=>{const e=p(t);document.body.append(e);const n={width:220,height:220};y(e,n),this.tip="请保持正脸",this.checkInterval=setInterval(async()=>{const i=await f(t,new m).withFaceLandmarks().withFaceDescriptors(),o=g(i,n),s=o[0].landmarks,c=C(s);o.length?o.length>1?this.tip="请保持单人入镜":o===1&&(this.tip="请保持不动"):this.tip="未检测到人脸",this.actionIndex<this.actionCode.length?this.actionCheck(c,s):(this.tip="检测完成",this.actionFinish()),e.getContext("2d").clearRect(0,0,e.width,e.height),v(e,o)},100)})}}},b={class:"wrapper"};function D(t,e,n,i,o,s){return w(),M("div",b,[a("div",null,[e[1]||(e[1]=a("h1",null,"人脸活体检测",-1)),e[2]||(e[2]=a("p",null,"请按照提示进行动作检测",-1)),a("p",null,l(o.tip),1)]),a("div",null,[a("button",{onClick:e[0]||(e[0]=(...c)=>t.restart&&t.restart(...c)),type:"button"}," 重新开始 ")]),a("div",null,"动作进度："+l(o.actionIndex)+"/"+l(s.actionTotal),1),e[3]||(e[3]=a("div",{class:"video-container"},[a("video",{id:"face-live-detection-video",muted:!0,playsinline:!0,autoplay:!0}," Please update your browser. ")],-1))])}const _=k(I,[["render",D]]);export{_ as default};
